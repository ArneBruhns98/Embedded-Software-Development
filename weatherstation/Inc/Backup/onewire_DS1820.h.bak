/**
  ******************************************************************************
  * @file           : onewire_DS1820.h
  * @brief          : Header for 1wire_DS1820.c file.
  *                   This file contains the headers of the functions used for
  *                   communicating to DS1820 via 1wire protocol
  ******************************************************************************
  *
  * @author			: Felix Lohse & Arne Bruhns
  *
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __ONEWIRE_DS1820_H
#define __ONEWIRE_DS1820_H

#ifdef __cplusplus
extern "C" {
#endif

/* Used for types like uint16_t ----------------------------------------------*/
#include "stm32f0xx_hal.h"


/* Used for GPIO Ports and Pins ----------------------------------------------*/
#include "main.h"

/* Used for delay in us function ---------------------------------------------*/
#include "delayus_lib.h"


/* Commands for DS1820 -------------------------------------------------------*/
#define SKIP_ROM 			0xCC
#define CONVERT_T 			0x44
#define READ_SCRATCHPAD		0xBE

/**
  * @brief Sets OneWire_Pin to low -> delays -> sets pin to high -> delays
  * 	   Used to create bit writing slots and reading slots for the master.
  * 	   Also used to generate reset pulses.
  * @param uint16_t low_time amount of time in us the pin should be pulled to low
  * @param uint16_t high_time amount of time in us the pin be released so it can be pulled high by pull up
  * @retval None
  */
void set_pin_low_then_high(uint16_t low_time, uint16_t high_time);

/**
  * @brief Sends single bits to 1wire channel, by creating a write slot
  * @param uint8_t bit bit to send, should only be used with bit values, not bytes, even though
  * 		   it's possible
  * @retval None
  */
void send_bit(uint8_t bit);

/**
  * @brief Sends a full byte to 1wire channel, by creating write slots.
  * 	   Byte is shifted to right by for loops index and bitwise and
  * 	   to select the LSB.
  * @param uint8_t byte byte to send
  */
void send_byte(uint8_t byte);

/**
  * @brief Function used to receive one single bit from the 1wire channel.
  * 	   Creates a master read slot by pulling the channel to low. Afterwards
  * 	   samples the current state of the channel and interprets it as 1 or 0.
  * 	   Also handles reconfiguration for the pin.
  * @retval uint8_t bit bit read from the 1wire channel.
  */
uint8_t receive_bit();

/**
  * @brief Receives a full byte from the 1wire channel, by reading eight single
  * 	   bits. Inserts bit to correct index of the byte. First bit in is MSB in return byte.
  * @retval uint8_t bit byte read from the 1wire channel.
  */
uint8_t receive_byte();

/**
  * @brief Function used to let the master wait till temperature conversion is done on DS1820.
  *        DS1820 pulls 1wire to low after receiving Convert T (44h) command, releases the channel and
  *        the channel gets pulled to high by pull up, after conversion is done.
  * @param uint16_t time amount of time to wait before sampling.
  * @retval None
  */
void wait_for_pullup(uint16_t time);

/**
  * @brief Resets the bus by sending 1wire specific reset pulse
  * 	   DS1820 will answer with presence pulse. But the presence pulse will be
  * 	   skipped, because there is a 500 us high_time scheduled.
  * @retval None
  */
void reset_bus();

/**
  * @brief Function used to get temperature data from DS1820.
  * 	   Follows protocol by:
  * 	   First Transaction:
  * 	   		- Send Reset pulse
  * 	   		- SKIP ROM (CCH)
  * 	   		- CONVERT T (44h)
  * 	   		- Wait till conversion is done
  *
  * 	   Second Transaction:
  * 	  	 	- Send Reset pulse
  * 	  	 	- READ SCRATCHPAD (BEh) by function receive_scratchpad
  *
  * 	  With the full scratchpad read, temperature calculation is done by
  * 	  calculate_temp.
  * @retval float Returns the value returned by temperature calculation.
  */	//TODO
int16_t get_temperature();

/**
  * @brief Function used to read the whole scratchpad into a given pad.
  * @param uint8_t* scratchpad local scratchpad to fill
  * @retval None
  */
void receive_scratchpad(uint8_t* scratchpad);

/**
  * @brief Function used to encapsulate temperature calculation.
  * @param uint8_t* scratchpad local scratchpad to use for calculation
  * @retval float the temperature in C° with 4 decimal places
  */ //TODO
int16_t calculate_temp(uint8_t* scratchpad);

/**
  * @brief Resets the bus by sending 1wire specific reset pulse.
  * 	   DS1820 will answer with presence pulse. Sampling for
  * 	   presence pulse and returning value if or if not presence
  * 	   pulse was received.
  * @retval uint8_t FALSE if not present, TRUE otherwise
  */
uint8_t get_presence();

#ifdef __cplusplus
}
#endif
#endif /* __ONEWIRE_DS1820_H */
